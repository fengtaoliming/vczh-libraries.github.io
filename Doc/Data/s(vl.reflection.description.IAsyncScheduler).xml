<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.IAsyncScheduler">
    <ClassDecl Access="Public" Name="IAsyncScheduler" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsyncScheduler" OverloadKey="::vl::reflection::description::IAsyncScheduler" ClassType="Class">
      <Children>
        <FuncDecl Access="Public" Name="Execute" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsyncScheduler::Execute" OverloadKey="::vl::reflection::description::IAsyncScheduler::Execute(&amp; const Func&lt;function () : void&gt;)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="callback" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsyncScheduler::Execute::callback" OverloadKey="::vl::reflection::description::IAsyncScheduler::Execute(&amp; const Func&lt;function () : void&gt;)::callback" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ExecuteInBackground" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsyncScheduler::ExecuteInBackground" OverloadKey="::vl::reflection::description::IAsyncScheduler::ExecuteInBackground(&amp; const Func&lt;function () : void&gt;)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="callback" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsyncScheduler::ExecuteInBackground::callback" OverloadKey="::vl::reflection::description::IAsyncScheduler::ExecuteInBackground(&amp; const Func&lt;function () : void&gt;)::callback" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="DelayExecute" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsyncScheduler::DelayExecute" OverloadKey="::vl::reflection::description::IAsyncScheduler::DelayExecute(&amp; const Func&lt;function () : void&gt;,vint)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="callback" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsyncScheduler::DelayExecute::callback" OverloadKey="::vl::reflection::description::IAsyncScheduler::DelayExecute(&amp; const Func&lt;function () : void&gt;,vint)::callback" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="milliseconds" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsyncScheduler::DelayExecute::milliseconds" OverloadKey="::vl::reflection::description::IAsyncScheduler::DelayExecute(&amp; const Func&lt;function () : void&gt;,vint)::milliseconds" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="RegisterDefaultScheduler" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsyncScheduler::RegisterDefaultScheduler" OverloadKey="::vl::reflection::description::IAsyncScheduler::RegisterDefaultScheduler(Ptr&lt;IAsyncScheduler&gt;)" Virtual="Static" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="scheduler" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsyncScheduler::RegisterDefaultScheduler::scheduler" OverloadKey="::vl::reflection::description::IAsyncScheduler::RegisterDefaultScheduler(Ptr&lt;IAsyncScheduler&gt;)::scheduler" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IAsyncScheduler" Name="IAsyncScheduler">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::IAsyncScheduler@s:vl.reflection.description.IAsyncScheduler" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="RegisterSchedulerForCurrentThread" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsyncScheduler::RegisterSchedulerForCurrentThread" OverloadKey="::vl::reflection::description::IAsyncScheduler::RegisterSchedulerForCurrentThread(Ptr&lt;IAsyncScheduler&gt;)" Virtual="Static" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="scheduler" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsyncScheduler::RegisterSchedulerForCurrentThread::scheduler" OverloadKey="::vl::reflection::description::IAsyncScheduler::RegisterSchedulerForCurrentThread(Ptr&lt;IAsyncScheduler&gt;)::scheduler" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IAsyncScheduler" Name="IAsyncScheduler">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::IAsyncScheduler@s:vl.reflection.description.IAsyncScheduler" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="UnregisterDefaultScheduler" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsyncScheduler::UnregisterDefaultScheduler" OverloadKey="::vl::reflection::description::IAsyncScheduler::UnregisterDefaultScheduler()" Virtual="Static" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IAsyncScheduler" Name="IAsyncScheduler">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IAsyncScheduler@s:vl.reflection.description.IAsyncScheduler" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="UnregisterSchedulerForCurrentThread" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsyncScheduler::UnregisterSchedulerForCurrentThread" OverloadKey="::vl::reflection::description::IAsyncScheduler::UnregisterSchedulerForCurrentThread()" Virtual="Static" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IAsyncScheduler" Name="IAsyncScheduler">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IAsyncScheduler@s:vl.reflection.description.IAsyncScheduler" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetSchedulerForCurrentThread" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsyncScheduler::GetSchedulerForCurrentThread" OverloadKey="::vl::reflection::description::IAsyncScheduler::GetSchedulerForCurrentThread()" Virtual="Static" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IAsyncScheduler" Name="IAsyncScheduler">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IAsyncScheduler@s:vl.reflection.description.IAsyncScheduler" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::IDescriptable" Name="IDescriptable">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::IDescriptable@s:vl.reflection.IDescriptable" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::Description" Name="Description">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::Description`1@s:vl.reflection.Description`1" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfClassInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfClassInstance}" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfInterfaceInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfInterfaceInstance}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IAsyncScheduler" Name="IAsyncScheduler">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::IAsyncScheduler@s:vl.reflection.description.IAsyncScheduler" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>