<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.TypeDescriptorImplBase">
    <ClassDecl Access="Public" Name="TypeDescriptorImplBase" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeDescriptorImplBase" OverloadKey="::vl::reflection::description::TypeDescriptorImplBase" ClassType="Class">
      <Children>
        <VarDecl Access="Private" Name="typeDescriptorFlags" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeDescriptorImplBase::typeDescriptorFlags" OverloadKey="::vl::reflection::description::TypeDescriptorImplBase::typeDescriptorFlags" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeDescriptorFlags" Name="TypeDescriptorFlags">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeDescriptorFlags@s:vl.reflection.description.TypeDescriptorFlags" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Private" Name="typeInfoContent" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeDescriptorImplBase::typeInfoContent" OverloadKey="::vl::reflection::description::TypeDescriptorImplBase::typeInfoContent" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeInfoContent" Name="TypeInfoContent">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeInfoContent@s:vl.reflection.description.TypeInfoContent" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Private" Name="typeName" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeDescriptorImplBase::typeName" OverloadKey="::vl::reflection::description::TypeDescriptorImplBase::typeName" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
              <ReferencingOverloadKeys>
                <Key Value="::vl::WString@s:vl.WString" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Private" Name="cppFullTypeName" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeDescriptorImplBase::cppFullTypeName" OverloadKey="::vl::reflection::description::TypeDescriptorImplBase::cppFullTypeName" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
              <ReferencingOverloadKeys>
                <Key Value="::vl::WString@s:vl.WString" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Private" Name="GetFullName" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeDescriptorImplBase::GetFullName" OverloadKey="::vl::reflection::description::TypeDescriptorImplBase::GetFullName()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::WString@s:vl.WString" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="GetTypeInfoContentInternal" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeDescriptorImplBase::GetTypeInfoContentInternal" OverloadKey="::vl::reflection::description::TypeDescriptorImplBase::GetTypeInfoContentInternal()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeInfoContent" Name="TypeInfoContent">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::TypeInfoContent@s:vl.reflection.description.TypeInfoContent" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="TypeDescriptorImplBase" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeDescriptorImplBase::TypeDescriptorImplBase" OverloadKey="::vl::reflection::description::TypeDescriptorImplBase::TypeDescriptorImplBase(TypeDescriptorFlags,* const TypeInfoContent)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_typeDescriptorFlags" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeDescriptorImplBase::TypeDescriptorImplBase::_typeDescriptorFlags" OverloadKey="::vl::reflection::description::TypeDescriptorImplBase::TypeDescriptorImplBase(TypeDescriptorFlags,* const TypeInfoContent)::_typeDescriptorFlags" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeDescriptorFlags" Name="TypeDescriptorFlags">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeDescriptorFlags@s:vl.reflection.description.TypeDescriptorFlags" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_typeInfoContent" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeDescriptorImplBase::TypeDescriptorImplBase::_typeInfoContent" OverloadKey="::vl::reflection::description::TypeDescriptorImplBase::TypeDescriptorImplBase(TypeDescriptorFlags,* const TypeInfoContent)::_typeInfoContent" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeInfoContent" Name="TypeInfoContent">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::TypeInfoContent@s:vl.reflection.description.TypeInfoContent" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~TypeDescriptorImplBase" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeDescriptorImplBase::~TypeDescriptorImplBase" OverloadKey="::vl::reflection::description::TypeDescriptorImplBase::~TypeDescriptorImplBase()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetCpp" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeDescriptorImplBase::GetCpp" OverloadKey="::vl::reflection::description::TypeDescriptorImplBase::GetCpp()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor::ICpp" Name="ICpp">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ITypeDescriptor::ICpp@s:vl.reflection.description.ITypeDescriptor" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetTypeDescriptorFlags" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeDescriptorImplBase::GetTypeDescriptorFlags" OverloadKey="::vl::reflection::description::TypeDescriptorImplBase::GetTypeDescriptorFlags()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeDescriptorFlags" Name="TypeDescriptorFlags">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::TypeDescriptorFlags@s:vl.reflection.description.TypeDescriptorFlags" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetTypeName" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeDescriptorImplBase::GetTypeName" OverloadKey="::vl::reflection::description::TypeDescriptorImplBase::GetTypeName()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::WString@s:vl.WString" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Private" Tags="x86, Windows">
          <Type>
            <SubTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor::ICpp" Name="ICpp">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::ITypeDescriptor::ICpp@s:vl.reflection.description.ITypeDescriptor" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>