<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.ITypeInfo">
    <ClassDecl Access="Public" Name="ITypeInfo" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeInfo" OverloadKey="::vl::reflection::description::ITypeInfo" ClassType="Class">
      <Children>
        <EnumDecl Access="Public" Name="Decorator" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeInfo::Decorator" OverloadKey="::vl::reflection::description::ITypeInfo::Decorator" EnumClass="False">
          <Children>
            <EnumItemDecl Access="Public" Name="RawPtr" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeInfo::Decorator::RawPtr" OverloadKey="::vl::reflection::description::ITypeInfo::Decorator::RawPtr" />
            <EnumItemDecl Access="Public" Name="SharedPtr" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeInfo::Decorator::SharedPtr" OverloadKey="::vl::reflection::description::ITypeInfo::Decorator::SharedPtr" />
            <EnumItemDecl Access="Public" Name="Nullable" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeInfo::Decorator::Nullable" OverloadKey="::vl::reflection::description::ITypeInfo::Decorator::Nullable" />
            <EnumItemDecl Access="Public" Name="TypeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeInfo::Decorator::TypeDescriptor" OverloadKey="::vl::reflection::description::ITypeInfo::Decorator::TypeDescriptor" />
            <EnumItemDecl Access="Public" Name="Generic" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeInfo::Decorator::Generic" OverloadKey="::vl::reflection::description::ITypeInfo::Decorator::Generic" />
          </Children>
        </EnumDecl>
        <FuncDecl Access="Public" Name="GetDecorator" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeInfo::GetDecorator" OverloadKey="::vl::reflection::description::ITypeInfo::GetDecorator()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeInfo::Decorator" Name="Decorator">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::ITypeInfo::Decorator@s:vl.reflection.description.ITypeInfo" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetHint" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeInfo::GetHint" OverloadKey="::vl::reflection::description::ITypeInfo::GetHint()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeInfoHint" Name="TypeInfoHint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::TypeInfoHint@s:vl.reflection.description.TypeInfoHint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetElementType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeInfo::GetElementType" OverloadKey="::vl::reflection::description::ITypeInfo::GetElementType()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeInfo" Name="ITypeInfo">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ITypeInfo@s:vl.reflection.description.ITypeInfo" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetTypeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeInfo::GetTypeDescriptor" OverloadKey="::vl::reflection::description::ITypeInfo::GetTypeDescriptor()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetGenericArgumentCount" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeInfo::GetGenericArgumentCount" OverloadKey="::vl::reflection::description::ITypeInfo::GetGenericArgumentCount()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetGenericArgument" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeInfo::GetGenericArgument" OverloadKey="::vl::reflection::description::ITypeInfo::GetGenericArgument(vint)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeInfo" Name="ITypeInfo">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ITypeInfo@s:vl.reflection.description.ITypeInfo" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeInfo::GetGenericArgument::index" OverloadKey="::vl::reflection::description::ITypeInfo::GetGenericArgument(vint)::index" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetTypeFriendlyName" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeInfo::GetTypeFriendlyName" OverloadKey="::vl::reflection::description::ITypeInfo::GetTypeFriendlyName()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::WString@s:vl.WString" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::IDescriptable" Name="IDescriptable">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::IDescriptable@s:vl.reflection.IDescriptable" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::Description" Name="Description">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::Description`1@s:vl.reflection.Description`1" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfClassInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfClassInstance}" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfInterfaceInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfInterfaceInstance}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeInfo" Name="ITypeInfo">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::ITypeInfo@s:vl.reflection.description.ITypeInfo" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>