<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.CppExists(^ ITypeDescriptor)">
    <FuncDecl Access="Public" Name="CppExists" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::CppExists" OverloadKey="::vl::reflection::description::CppExists(* ITypeDescriptor)" Virtual="Normal" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="bool" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="type" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::CppExists::type" OverloadKey="::vl::reflection::description::CppExists(* ITypeDescriptor)::type" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.CppExists(^ IPropertyInfo)">
    <FuncDecl Access="Public" Name="CppExists" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::CppExists" OverloadKey="::vl::reflection::description::CppExists(* IPropertyInfo)" Virtual="Normal" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="bool" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="prop" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::CppExists::prop" OverloadKey="::vl::reflection::description::CppExists(* IPropertyInfo)::prop" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IPropertyInfo" Name="IPropertyInfo">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IPropertyInfo@s:vl.reflection.description.IPropertyInfo" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.CppExists(^ IMethodInfo)">
    <FuncDecl Access="Public" Name="CppExists" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::CppExists" OverloadKey="::vl::reflection::description::CppExists(* IMethodInfo)" Virtual="Normal" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="bool" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="method" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::CppExists::method" OverloadKey="::vl::reflection::description::CppExists(* IMethodInfo)::method" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IMethodInfo" Name="IMethodInfo">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IMethodInfo@s:vl.reflection.description.IMethodInfo" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.CppExists(^ IEventInfo)">
    <FuncDecl Access="Public" Name="CppExists" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::CppExists" OverloadKey="::vl::reflection::description::CppExists(* IEventInfo)" Virtual="Normal" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="bool" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="ev" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::CppExists::ev" OverloadKey="::vl::reflection::description::CppExists(* IEventInfo)::ev" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IEventInfo" Name="IEventInfo">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IEventInfo@s:vl.reflection.description.IEventInfo" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
</OverloadingSymbols>