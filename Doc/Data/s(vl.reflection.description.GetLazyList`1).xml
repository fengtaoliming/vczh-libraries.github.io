<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.GetLazyList`1(Ptr{IValueEnumerable})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::GetLazyList`1(Ptr&lt;IValueEnumerable&gt;)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="GetLazyList" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::GetLazyList" OverloadKey="::vl::reflection::description::GetLazyList`1(Ptr&lt;IValueEnumerable&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::collections::LazyList" Name="LazyList">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections::LazyList`1@s:vl.collections.LazyList`1" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections@ns:vl.collections" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::GetLazyList`1(Ptr&lt;IValueEnumerable&gt;)::T@s:vl.reflection.description.GetLazyList`1(Ptr{IValueEnumerable})" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::GetLazyList::value" OverloadKey="::vl::reflection::description::GetLazyList`1(Ptr&lt;IValueEnumerable&gt;)::value" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IValueEnumerable" Name="IValueEnumerable">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::IValueEnumerable@s:vl.reflection.description.IValueEnumerable" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.GetLazyList`1(Ptr{IValueReadonlyList})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::GetLazyList`1(Ptr&lt;IValueReadonlyList&gt;)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="GetLazyList" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::GetLazyList" OverloadKey="::vl::reflection::description::GetLazyList`1(Ptr&lt;IValueReadonlyList&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::collections::LazyList" Name="LazyList">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections::LazyList`1@s:vl.collections.LazyList`1" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections@ns:vl.collections" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::GetLazyList`1(Ptr&lt;IValueReadonlyList&gt;)::T@s:vl.reflection.description.GetLazyList`1(Ptr{IValueReadonlyList})" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::GetLazyList::value" OverloadKey="::vl::reflection::description::GetLazyList`1(Ptr&lt;IValueReadonlyList&gt;)::value" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IValueReadonlyList" Name="IValueReadonlyList">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::IValueReadonlyList@s:vl.reflection.description.IValueReadonlyList" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.GetLazyList`1(Ptr{IValueList})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::GetLazyList`1(Ptr&lt;IValueList&gt;)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="GetLazyList" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::GetLazyList" OverloadKey="::vl::reflection::description::GetLazyList`1(Ptr&lt;IValueList&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::collections::LazyList" Name="LazyList">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections::LazyList`1@s:vl.collections.LazyList`1" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections@ns:vl.collections" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::GetLazyList`1(Ptr&lt;IValueList&gt;)::T@s:vl.reflection.description.GetLazyList`1(Ptr{IValueList})" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::GetLazyList::value" OverloadKey="::vl::reflection::description::GetLazyList`1(Ptr&lt;IValueList&gt;)::value" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IValueList" Name="IValueList">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::IValueList@s:vl.reflection.description.IValueList" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.GetLazyList`1(Ptr{IValueObservableList})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::GetLazyList`1(Ptr&lt;IValueObservableList&gt;)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="GetLazyList" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::GetLazyList" OverloadKey="::vl::reflection::description::GetLazyList`1(Ptr&lt;IValueObservableList&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::collections::LazyList" Name="LazyList">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections::LazyList`1@s:vl.collections.LazyList`1" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections@ns:vl.collections" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::GetLazyList`1(Ptr&lt;IValueObservableList&gt;)::T@s:vl.reflection.description.GetLazyList`1(Ptr{IValueObservableList})" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::GetLazyList::value" OverloadKey="::vl::reflection::description::GetLazyList`1(Ptr&lt;IValueObservableList&gt;)::value" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IValueObservableList" Name="IValueObservableList">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::IValueObservableList@s:vl.reflection.description.IValueObservableList" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>