<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.presentation.elements.GuiColorizedTextElement">
    <ClassDecl Access="Public" Name="GuiColorizedTextElement" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;
Defines a text element with separate color configuration for each character.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <FuncDecl Access="Public" Name="GetElementTypeName" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::GetElementTypeName" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::GetElementTypeName()" Virtual="Static" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::WString@s:vl.WString" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <TypedefDecl Access="Public" Name="ColorArray" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::ColorArray" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::ColorArray">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::Array" Name="Array">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::Array`2@s:vl.collections.Array`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <SubTypeDecl ReferencingNameKey="::vl::presentation::elements::text::ColorEntry" Name="ColorEntry">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::elements::text::ColorEntry@s:vl.presentation.elements.text.ColorEntry" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::elements::text" Name="text">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::elements::text@ns:vl.presentation.elements.text" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </TypedefDecl>
        <ClassDecl Access="Public" Name="ICallback" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::ICallback" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::ICallback" ClassType="Class">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
An callback interface. Member functions will be called when colors or fonts of a &lt;links&gt;&lt;link cref="::vl::presentation::elements::GuiColorizedTextElement@s:vl.presentation.elements.GuiColorizedTextElement" /&gt;&lt;/links&gt; changed.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Children>
            <FuncDecl Access="Public" Name="ColorChanged" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::ICallback::ColorChanged" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::ICallback::ColorChanged()" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the color table of a &lt;links&gt;&lt;link cref="::vl::presentation::elements::GuiColorizedTextElement@s:vl.presentation.elements.GuiColorizedTextElement" /&gt;&lt;/links&gt; changed.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="FontChanged" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::ICallback::FontChanged" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::ICallback::FontChanged()" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the font configuration of a &lt;links&gt;&lt;link cref="::vl::presentation::elements::GuiColorizedTextElement@s:vl.presentation.elements.GuiColorizedTextElement" /&gt;&lt;/links&gt; changed.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::IDescriptable" Name="IDescriptable">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::IDescriptable@s:vl.reflection.IDescriptable" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::Description" Name="Description">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::Description`1@s:vl.reflection.Description`1" />
                        <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfClassInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfClassInstance}" />
                        <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfInterfaceInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfInterfaceInstance}" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::elements::GuiColorizedTextElement::ICallback" Name="ICallback">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::elements::GuiColorizedTextElement::ICallback@s:vl.presentation.elements.GuiColorizedTextElement" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
        <VarDecl Access="Protected" Name="callback" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::callback" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::callback" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::elements::GuiColorizedTextElement::ICallback" Name="ICallback">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::elements::GuiColorizedTextElement::ICallback@s:vl.presentation.elements.GuiColorizedTextElement" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="colors" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::colors" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::colors" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::elements::GuiColorizedTextElement::ColorArray" Name="ColorArray">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::elements::GuiColorizedTextElement::ColorArray@s:vl.presentation.elements.GuiColorizedTextElement" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="font" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::font" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::font" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::FontProperties" Name="FontProperties">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::FontProperties@s:vl.presentation.FontProperties" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="viewPosition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::viewPosition" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::viewPosition" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::Point" Name="Point">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::Point@s:vl.presentation.Point" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="isVisuallyEnabled" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::isVisuallyEnabled" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::isVisuallyEnabled" Static="False">
          <Type>
            <RefTypeDecl Name="bool" />
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="isFocused" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::isFocused" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::isFocused" Static="False">
          <Type>
            <RefTypeDecl Name="bool" />
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="caretBegin" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::caretBegin" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::caretBegin" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::TextPos" Name="TextPos">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::TextPos@s:vl.presentation.TextPos" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="caretEnd" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::caretEnd" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::caretEnd" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::TextPos" Name="TextPos">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::TextPos@s:vl.presentation.TextPos" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="caretVisible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::caretVisible" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::caretVisible" Static="False">
          <Type>
            <RefTypeDecl Name="bool" />
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="caretColor" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::caretColor" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::caretColor" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::Color" Name="Color">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::Color@s:vl.presentation.Color" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="lines" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::lines" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::lines" Static="False">
          <Type>
            <SubTypeDecl ReferencingNameKey="::vl::presentation::elements::text::TextLines" Name="TextLines">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::elements::text::TextLines@s:vl.presentation.elements.text.TextLines" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::elements::text" Name="text">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::elements::text@ns:vl.presentation.elements.text" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Protected" Name="GuiColorizedTextElement" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::GuiColorizedTextElement" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::GuiColorizedTextElement()" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetLines" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::GetLines" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::GetLines()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the internal &lt;links&gt;&lt;link cref="::vl::presentation::elements::text::TextLines@s:vl.presentation.elements.text.TextLines" /&gt;&lt;/links&gt; object that stores all characters and colors.
&lt;/summary&gt;
  &lt;returns&gt;The internal &lt;links&gt;&lt;link cref="::vl::presentation::elements::text::TextLines@s:vl.presentation.elements.text.TextLines" /&gt;&lt;/links&gt; object.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::presentation::elements::text::TextLines" Name="TextLines">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::elements::text::TextLines@s:vl.presentation.elements.text.TextLines" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::elements::text" Name="text">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::elements::text@ns:vl.presentation.elements.text" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetCallback" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::GetCallback" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::GetCallback()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the binded callback object.
&lt;/summary&gt;
  &lt;returns&gt;The binded callback object.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::elements::GuiColorizedTextElement::ICallback" Name="ICallback">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::elements::GuiColorizedTextElement::ICallback@s:vl.presentation.elements.GuiColorizedTextElement" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetCallback" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetCallback" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetCallback(* ICallback)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Bind a callback object.
&lt;/summary&gt;
  &lt;param name="value"&gt;The callback object to bind.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetCallback::value" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetCallback(* ICallback)::value" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::elements::GuiColorizedTextElement::ICallback" Name="ICallback">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::elements::GuiColorizedTextElement::ICallback@s:vl.presentation.elements.GuiColorizedTextElement" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetColors" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::GetColors" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::GetColors()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the binded color table. Use &lt;links&gt;&lt;link cref="::vl::presentation::elements::text::CharAtt::colorIndex@s:vl.presentation.elements.text.CharAtt" /&gt;&lt;/links&gt; to use colors in this color table.
&lt;/summary&gt;
  &lt;returns&gt;The binded color table.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::elements::GuiColorizedTextElement::ColorArray" Name="ColorArray">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::elements::GuiColorizedTextElement::ColorArray@s:vl.presentation.elements.GuiColorizedTextElement" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetColors" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetColors" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetColors(&amp; const ColorArray)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Bind a color table. Use &lt;links&gt;&lt;link cref="::vl::presentation::elements::text::CharAtt::colorIndex@s:vl.presentation.elements.text.CharAtt" /&gt;&lt;/links&gt; to use colors in this color table. &lt;links&gt;&lt;link cref="::vl::presentation::elements::GuiColorizedTextElement::ICallback::ColorChanged()@s:vl.presentation.elements.GuiColorizedTextElement" /&gt;&lt;/links&gt; will be called.
&lt;/summary&gt;
  &lt;param name="value"&gt;The color table to bind.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetColors::value" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetColors(&amp; const ColorArray)::value" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::elements::GuiColorizedTextElement::ColorArray" Name="ColorArray">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::elements::GuiColorizedTextElement::ColorArray@s:vl.presentation.elements.GuiColorizedTextElement" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ResetTextColorIndex" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::ResetTextColorIndex" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::ResetTextColorIndex(vint)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Reset color of all characters
&lt;/summary&gt;
  &lt;param name="index"&gt;Color index of all characters.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::ResetTextColorIndex::index" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::ResetTextColorIndex(vint)::index" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetFont" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::GetFont" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::GetFont()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the font configuration for all characters.
&lt;/summary&gt;
  &lt;returns&gt;The font configuration.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::FontProperties" Name="FontProperties">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::FontProperties@s:vl.presentation.FontProperties" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetFont" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetFont" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetFont(&amp; const FontProperties)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Set the font configuration for all characters. &lt;links&gt;&lt;link cref="::vl::presentation::elements::GuiColorizedTextElement::ICallback::FontChanged()@s:vl.presentation.elements.GuiColorizedTextElement" /&gt;&lt;/links&gt; will be called.
&lt;/summary&gt;
  &lt;param name="value"&gt;The font configuration.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetFont::value" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetFont(&amp; const FontProperties)::value" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::FontProperties" Name="FontProperties">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::FontProperties@s:vl.presentation.FontProperties" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetPasswordChar" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::GetPasswordChar" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::GetPasswordChar()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the password mode displaying character.
&lt;/summary&gt;
  &lt;returns&gt;The password mode displaying character. Returns L'\0' means the password mode is not activated.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="wchar_t" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetPasswordChar" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetPasswordChar" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetPasswordChar(wchar_t)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Set the password mode displaying character.
&lt;/summary&gt;
  &lt;param name="value"&gt;The password mode displaying character. Set to L'\0' to deactivate the password mode.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetPasswordChar::value" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetPasswordChar(wchar_t)::value" Static="False">
                  <Type>
                    <RefTypeDecl Name="wchar_t" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetViewPosition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::GetViewPosition" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::GetViewPosition()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the left-top position of the visible bounds of characters.
&lt;/summary&gt;
  &lt;returns&gt;The left-top position of the visible bounds of characters.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::Point" Name="Point">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::Point@s:vl.presentation.Point" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetViewPosition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetViewPosition" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetViewPosition(Point)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Set the left-top position of the visible bounds of characters.
&lt;/summary&gt;
  &lt;param name="value"&gt;The left-top position of the visible bounds of characters.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetViewPosition::value" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetViewPosition(Point)::value" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Point" Name="Point">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Point@s:vl.presentation.Point" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetVisuallyEnabled" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::GetVisuallyEnabled" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::GetVisuallyEnabled()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the enabling state.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the element will be rendered as an enabled element.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetVisuallyEnabled" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetVisuallyEnabled" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetVisuallyEnabled(bool)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Set the enabling state.
&lt;/summary&gt;
  &lt;param name="value"&gt;True if the element will be rendered as an enabled element.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetVisuallyEnabled::value" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetVisuallyEnabled(bool)::value" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetFocused" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::GetFocused" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::GetFocused()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the focused state.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the element will be rendered as a focused element.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetFocused" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetFocused" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetFocused(bool)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Set the focused state.
&lt;/summary&gt;
  &lt;param name="value"&gt;True if the element will be rendered as a focused element.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetFocused::value" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetFocused(bool)::value" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetCaretBegin" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::GetCaretBegin" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::GetCaretBegin()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the begin position of the selection area.
&lt;/summary&gt;
  &lt;returns&gt;The begin position of the selection area.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::TextPos" Name="TextPos">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::TextPos@s:vl.presentation.TextPos" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetCaretBegin" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetCaretBegin" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetCaretBegin(TextPos)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Set the begin position of the selection area.
&lt;/summary&gt;
  &lt;param name="value"&gt;The begin position of the selection area.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetCaretBegin::value" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetCaretBegin(TextPos)::value" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::TextPos" Name="TextPos">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::TextPos@s:vl.presentation.TextPos" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetCaretEnd" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::GetCaretEnd" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::GetCaretEnd()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the end position of the selection area.
&lt;/summary&gt;
  &lt;returns&gt;The end position of the selection area.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::TextPos" Name="TextPos">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::TextPos@s:vl.presentation.TextPos" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetCaretEnd" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetCaretEnd" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetCaretEnd(TextPos)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Set the end position of the selection area.
&lt;/summary&gt;
  &lt;param name="value"&gt;The end position of the selection area.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetCaretEnd::value" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetCaretEnd(TextPos)::value" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::TextPos" Name="TextPos">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::TextPos@s:vl.presentation.TextPos" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetCaretVisible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::GetCaretVisible" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::GetCaretVisible()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the caret visibility.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the caret will be rendered.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetCaretVisible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetCaretVisible" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetCaretVisible(bool)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Set the caret visibility.
&lt;/summary&gt;
  &lt;param name="value"&gt;True if the caret will be rendered.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetCaretVisible::value" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetCaretVisible(bool)::value" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetCaretColor" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::GetCaretColor" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::GetCaretColor()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the color of the caret.
&lt;/summary&gt;
  &lt;returns&gt;The color of the caret.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::Color" Name="Color">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::Color@s:vl.presentation.Color" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetCaretColor" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetCaretColor" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetCaretColor(Color)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Set the color of the caret.
&lt;/summary&gt;
  &lt;param name="value"&gt;The color of the caret.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::elements::GuiColorizedTextElement::SetCaretColor::value" OverloadKey="::vl::presentation::elements::GuiColorizedTextElement::SetCaretColor(Color)::value" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Color" Name="Color">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Color@s:vl.presentation.Color" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::elements::GuiElementBase" Name="GuiElementBase">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::elements::GuiElementBase`1@s:vl.presentation.elements.GuiElementBase`1" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::elements::GuiColorizedTextElement" Name="GuiColorizedTextElement">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::elements::GuiColorizedTextElement@s:vl.presentation.elements.GuiColorizedTextElement" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>