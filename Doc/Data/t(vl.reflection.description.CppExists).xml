<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="vl.reflection.description.CppExists(^ ITypeDescriptor)">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping />
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::CppExists(* ITypeDescriptor)" DisplayName="CppExists function" Doc="false" />
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.CppExists(^ IPropertyInfo)">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping />
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::CppExists(* IPropertyInfo)" DisplayName="CppExists function" Doc="false" />
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.CppExists(^ IMethodInfo)">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping />
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::CppExists(* IMethodInfo)" DisplayName="CppExists function" Doc="false" />
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.CppExists(^ IEventInfo)">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping />
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::CppExists(* IEventInfo)" DisplayName="CppExists function" Doc="false" />
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>