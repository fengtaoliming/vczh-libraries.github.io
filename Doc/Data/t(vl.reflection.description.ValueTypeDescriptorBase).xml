<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="vl.reflection.description.ValueTypeDescriptorBase">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping />
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase" DisplayName="ValueTypeDescriptorBase class" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::loaded" DisplayName="loaded field" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::valueType" DisplayName="valueType field" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::enumType" DisplayName="enumType field" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::serializableType" DisplayName="serializableType field" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::LoadInternal()" DisplayName="LoadInternal method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::Load()" DisplayName="Load method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::ValueTypeDescriptorBase(TypeDescriptorFlags,* const TypeInfoContent)" DisplayName="ValueTypeDescriptorBase constructor" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::~ValueTypeDescriptorBase()" DisplayName="~ValueTypeDescriptorBase destructor" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::IsAggregatable()" DisplayName="IsAggregatable method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::GetValueType()" DisplayName="GetValueType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::GetEnumType()" DisplayName="GetEnumType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::GetSerializableType()" DisplayName="GetSerializableType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::GetBaseTypeDescriptorCount()" DisplayName="GetBaseTypeDescriptorCount method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::GetBaseTypeDescriptor(vint)" DisplayName="GetBaseTypeDescriptor method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::CanConvertTo(* ITypeDescriptor)" DisplayName="CanConvertTo method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::GetPropertyCount()" DisplayName="GetPropertyCount method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::GetProperty(vint)" DisplayName="GetProperty method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::IsPropertyExists(&amp; const WString,bool)" DisplayName="IsPropertyExists method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::GetPropertyByName(&amp; const WString,bool)" DisplayName="GetPropertyByName method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::GetEventCount()" DisplayName="GetEventCount method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::GetEvent(vint)" DisplayName="GetEvent method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::IsEventExists(&amp; const WString,bool)" DisplayName="IsEventExists method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::GetEventByName(&amp; const WString,bool)" DisplayName="GetEventByName method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::GetMethodGroupCount()" DisplayName="GetMethodGroupCount method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::GetMethodGroup(vint)" DisplayName="GetMethodGroup method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::IsMethodGroupExists(&amp; const WString,bool)" DisplayName="IsMethodGroupExists method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::GetMethodGroupByName(&amp; const WString,bool)" DisplayName="GetMethodGroupByName method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueTypeDescriptorBase::GetConstructorGroup()" DisplayName="GetConstructorGroup method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>