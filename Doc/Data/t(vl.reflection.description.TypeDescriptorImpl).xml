<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="vl.reflection.description.TypeDescriptorImpl">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping />
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl" DisplayName="TypeDescriptorImpl class" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::loaded" DisplayName="loaded field" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::baseTypeDescriptors" DisplayName="baseTypeDescriptors field" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::properties" DisplayName="properties field" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::events" DisplayName="events field" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::methodGroups" DisplayName="methodGroups field" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::constructorGroup" DisplayName="constructorGroup field" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::PrepareMethodGroup(&amp; const WString)" DisplayName="PrepareMethodGroup method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::PrepareConstructorGroup()" DisplayName="PrepareConstructorGroup method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::AddProperty(Ptr&lt;IPropertyInfo&gt;)" DisplayName="AddProperty method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::AddEvent(Ptr&lt;IEventInfo&gt;)" DisplayName="AddEvent method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::AddMethod(&amp; const WString,Ptr&lt;MethodInfoImpl&gt;)" DisplayName="AddMethod method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::AddConstructor(Ptr&lt;MethodInfoImpl&gt;)" DisplayName="AddConstructor method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::AddBaseType(* ITypeDescriptor)" DisplayName="AddBaseType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::LoadInternal()" DisplayName="LoadInternal method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::Load()" DisplayName="Load method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::TypeDescriptorImpl(TypeDescriptorFlags,* const TypeInfoContent)" DisplayName="TypeDescriptorImpl constructor" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::~TypeDescriptorImpl()" DisplayName="~TypeDescriptorImpl destructor" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::IsAggregatable()" DisplayName="IsAggregatable method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::GetValueType()" DisplayName="GetValueType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::GetEnumType()" DisplayName="GetEnumType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::GetSerializableType()" DisplayName="GetSerializableType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::GetBaseTypeDescriptorCount()" DisplayName="GetBaseTypeDescriptorCount method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::GetBaseTypeDescriptor(vint)" DisplayName="GetBaseTypeDescriptor method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::CanConvertTo(* ITypeDescriptor)" DisplayName="CanConvertTo method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::GetPropertyCount()" DisplayName="GetPropertyCount method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::GetProperty(vint)" DisplayName="GetProperty method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::IsPropertyExists(&amp; const WString,bool)" DisplayName="IsPropertyExists method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::GetPropertyByName(&amp; const WString,bool)" DisplayName="GetPropertyByName method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::GetEventCount()" DisplayName="GetEventCount method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::GetEvent(vint)" DisplayName="GetEvent method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::IsEventExists(&amp; const WString,bool)" DisplayName="IsEventExists method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::GetEventByName(&amp; const WString,bool)" DisplayName="GetEventByName method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::GetMethodGroupCount()" DisplayName="GetMethodGroupCount method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::GetMethodGroup(vint)" DisplayName="GetMethodGroup method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::IsMethodGroupExists(&amp; const WString,bool)" DisplayName="IsMethodGroupExists method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::GetMethodGroupByName(&amp; const WString,bool)" DisplayName="GetMethodGroupByName method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeDescriptorImpl::GetConstructorGroup()" DisplayName="GetConstructorGroup method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>