<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.EnumerableCoroutine">
    <ClassDecl Access="Public" Name="EnumerableCoroutine" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EnumerableCoroutine" OverloadKey="::vl::reflection::description::EnumerableCoroutine" ClassType="Class">
      <Children>
        <ClassDecl Access="Public" Name="IImpl" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EnumerableCoroutine::IImpl" OverloadKey="::vl::reflection::description::EnumerableCoroutine::IImpl" ClassType="Class">
          <Children>
            <FuncDecl Access="Public" Name="OnYield" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EnumerableCoroutine::IImpl::OnYield" OverloadKey="::vl::reflection::description::EnumerableCoroutine::IImpl::OnYield(&amp; const Value)" Virtual="Abstract" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EnumerableCoroutine::IImpl::OnYield::value" OverloadKey="::vl::reflection::description::EnumerableCoroutine::IImpl::OnYield(&amp; const Value)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="OnJoin" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EnumerableCoroutine::IImpl::OnJoin" OverloadKey="::vl::reflection::description::EnumerableCoroutine::IImpl::OnJoin(Ptr&lt;IValueEnumerable&gt;)" Virtual="Abstract" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EnumerableCoroutine::IImpl::OnJoin::value" OverloadKey="::vl::reflection::description::EnumerableCoroutine::IImpl::OnJoin(Ptr&lt;IValueEnumerable&gt;)::value" Static="False">
                      <Type>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IValueEnumerable" Name="IValueEnumerable">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::IValueEnumerable@s:vl.reflection.description.IValueEnumerable" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IValueEnumerator" Name="IValueEnumerator">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::IValueEnumerator@s:vl.reflection.description.IValueEnumerator" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::Description" Name="Description">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::Description`1@s:vl.reflection.Description`1" />
                        <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfClassInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfClassInstance}" />
                        <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfInterfaceInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfInterfaceInstance}" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::EnumerableCoroutine::IImpl" Name="IImpl">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::EnumerableCoroutine::IImpl@s:vl.reflection.description.EnumerableCoroutine" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
        <TypedefDecl Access="Public" Name="Creator" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EnumerableCoroutine::Creator" OverloadKey="::vl::reflection::description::EnumerableCoroutine::Creator">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ICoroutine" Name="ICoroutine">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::ICoroutine@s:vl.reflection.description.ICoroutine" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::EnumerableCoroutine::IImpl" Name="IImpl">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::EnumerableCoroutine::IImpl@s:vl.reflection.description.EnumerableCoroutine" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </TypedefDecl>
        <FuncDecl Access="Public" Name="YieldAndPause" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EnumerableCoroutine::YieldAndPause" OverloadKey="::vl::reflection::description::EnumerableCoroutine::YieldAndPause(* IImpl,&amp; const Value)" Virtual="Static" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="impl" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EnumerableCoroutine::YieldAndPause::impl" OverloadKey="::vl::reflection::description::EnumerableCoroutine::YieldAndPause(* IImpl,&amp; const Value)::impl" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::EnumerableCoroutine::IImpl" Name="IImpl">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::EnumerableCoroutine::IImpl@s:vl.reflection.description.EnumerableCoroutine" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EnumerableCoroutine::YieldAndPause::value" OverloadKey="::vl::reflection::description::EnumerableCoroutine::YieldAndPause(* IImpl,&amp; const Value)::value" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="JoinAndPause" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EnumerableCoroutine::JoinAndPause" OverloadKey="::vl::reflection::description::EnumerableCoroutine::JoinAndPause(* IImpl,Ptr&lt;IValueEnumerable&gt;)" Virtual="Static" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="impl" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EnumerableCoroutine::JoinAndPause::impl" OverloadKey="::vl::reflection::description::EnumerableCoroutine::JoinAndPause(* IImpl,Ptr&lt;IValueEnumerable&gt;)::impl" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::EnumerableCoroutine::IImpl" Name="IImpl">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::EnumerableCoroutine::IImpl@s:vl.reflection.description.EnumerableCoroutine" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EnumerableCoroutine::JoinAndPause::value" OverloadKey="::vl::reflection::description::EnumerableCoroutine::JoinAndPause(* IImpl,Ptr&lt;IValueEnumerable&gt;)::value" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IValueEnumerable" Name="IValueEnumerable">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::IValueEnumerable@s:vl.reflection.description.IValueEnumerable" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ReturnAndExit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EnumerableCoroutine::ReturnAndExit" OverloadKey="::vl::reflection::description::EnumerableCoroutine::ReturnAndExit(* IImpl)" Virtual="Static" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="impl" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EnumerableCoroutine::ReturnAndExit::impl" OverloadKey="::vl::reflection::description::EnumerableCoroutine::ReturnAndExit(* IImpl)::impl" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::EnumerableCoroutine::IImpl" Name="IImpl">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::EnumerableCoroutine::IImpl@s:vl.reflection.description.EnumerableCoroutine" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Create" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EnumerableCoroutine::Create" OverloadKey="::vl::reflection::description::EnumerableCoroutine::Create(&amp; const Creator)" Virtual="Static" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IValueEnumerable" Name="IValueEnumerable">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IValueEnumerable@s:vl.reflection.description.IValueEnumerable" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="creator" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EnumerableCoroutine::Create::creator" OverloadKey="::vl::reflection::description::EnumerableCoroutine::Create(&amp; const Creator)::creator" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::EnumerableCoroutine::Creator" Name="Creator">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::EnumerableCoroutine::Creator@s:vl.reflection.description.EnumerableCoroutine" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::Description" Name="Description">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::Description`1@s:vl.reflection.Description`1" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfClassInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfClassInstance}" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfInterfaceInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfInterfaceInstance}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::EnumerableCoroutine" Name="EnumerableCoroutine">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::EnumerableCoroutine@s:vl.reflection.description.EnumerableCoroutine" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>