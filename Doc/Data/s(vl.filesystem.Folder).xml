<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.filesystem.Folder">
    <ClassDecl Access="Public" Name="Folder" Tags="x64, Windows;x86, Windows" NameKey="::vl::filesystem::Folder" OverloadKey="::vl::filesystem::Folder" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Representing a folder reference.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <VarDecl Access="Private" Name="filePath" Tags="x64, Windows;x86, Windows" NameKey="::vl::filesystem::Folder::filePath" OverloadKey="::vl::filesystem::Folder::filePath" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::filesystem::FilePath" Name="FilePath">
              <ReferencingOverloadKeys>
                <Key Value="::vl::filesystem::FilePath@s:vl.filesystem.FilePath" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="Folder" Tags="x64, Windows;x86, Windows" NameKey="::vl::filesystem::Folder::Folder" OverloadKey="::vl::filesystem::Folder::Folder()" Virtual="Normal" Function="Constructor">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create a root reference.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Folder" Tags="x64, Windows;x86, Windows" NameKey="::vl::filesystem::Folder::Folder" OverloadKey="::vl::filesystem::Folder::Folder(&amp; const FilePath)" Virtual="Normal" Function="Constructor">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create a reference to a specified folder.&lt;/summary&gt;
  &lt;param name="_filePath"&gt;The specified folder.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_filePath" Tags="x64, Windows;x86, Windows" NameKey="::vl::filesystem::Folder::Folder::_filePath" OverloadKey="::vl::filesystem::Folder::Folder(&amp; const FilePath)::_filePath" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::filesystem::FilePath" Name="FilePath">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::filesystem::FilePath@s:vl.filesystem.FilePath" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~Folder" Tags="x64, Windows;x86, Windows" NameKey="::vl::filesystem::Folder::~Folder" OverloadKey="::vl::filesystem::Folder::~Folder()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetFilePath" Tags="x64, Windows;x86, Windows" NameKey="::vl::filesystem::Folder::GetFilePath" OverloadKey="::vl::filesystem::Folder::GetFilePath()const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the file path of the folder.&lt;/summary&gt;
  &lt;returns&gt;The file path.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::filesystem::FilePath" Name="FilePath">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::filesystem::FilePath@s:vl.filesystem.FilePath" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetFolders" Tags="x64, Windows;x86, Windows" NameKey="::vl::filesystem::Folder::GetFolders" OverloadKey="::vl::filesystem::Folder::GetFolders(&amp; collections::List&lt;Folder&gt;)const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get all folders in this folder.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="folders"&gt;All folders.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="folders" Tags="x64, Windows;x86, Windows" NameKey="::vl::filesystem::Folder::GetFolders::folders" OverloadKey="::vl::filesystem::Folder::GetFolders(&amp; collections::List&lt;Folder&gt;)const::folders" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                              </ReferencingOverloadKeys>
                              <Parent>
                                <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections@ns:vl.collections" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Parent>
                            </SubTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::filesystem::Folder" Name="Folder">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::filesystem::Folder@s:vl.filesystem.Folder" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetFiles" Tags="x64, Windows;x86, Windows" NameKey="::vl::filesystem::Folder::GetFiles" OverloadKey="::vl::filesystem::Folder::GetFiles(&amp; collections::List&lt;File&gt;)const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get all files in this folder.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="files"&gt;All files.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="files" Tags="x64, Windows;x86, Windows" NameKey="::vl::filesystem::Folder::GetFiles::files" OverloadKey="::vl::filesystem::Folder::GetFiles(&amp; collections::List&lt;File&gt;)const::files" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                              </ReferencingOverloadKeys>
                              <Parent>
                                <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections@ns:vl.collections" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Parent>
                            </SubTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::filesystem::File" Name="File">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::filesystem::File@s:vl.filesystem.File" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Exists" Tags="x64, Windows;x86, Windows" NameKey="::vl::filesystem::Folder::Exists" OverloadKey="::vl::filesystem::Folder::Exists()const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Test does the folder exist or not.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the folder exists.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Create" Tags="x64, Windows;x86, Windows" NameKey="::vl::filesystem::Folder::Create" OverloadKey="::vl::filesystem::Folder::Create(bool)const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create the folder.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="recursively"&gt;Set to true to create all parent folders if necessary.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="recursively" Tags="x64, Windows;x86, Windows" NameKey="::vl::filesystem::Folder::Create::recursively" OverloadKey="::vl::filesystem::Folder::Create(bool)const::recursively" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Delete" Tags="x64, Windows;x86, Windows" NameKey="::vl::filesystem::Folder::Delete" OverloadKey="::vl::filesystem::Folder::Delete(bool)const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Delete the folder.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="recursively"&gt;Set to true to delete everything in the folder.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="recursively" Tags="x64, Windows;x86, Windows" NameKey="::vl::filesystem::Folder::Delete::recursively" OverloadKey="::vl::filesystem::Folder::Delete(bool)const::recursively" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Rename" Tags="x64, Windows;x86, Windows" NameKey="::vl::filesystem::Folder::Rename" OverloadKey="::vl::filesystem::Folder::Rename(&amp; const WString)const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Rename the folder in the same folder.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="newName"&gt;The new folder name.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="newName" Tags="x64, Windows;x86, Windows" NameKey="::vl::filesystem::Folder::Rename::newName" OverloadKey="::vl::filesystem::Folder::Rename(&amp; const WString)const::newName" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>