<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="vl.reflection.description.EnumerableCoroutine">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping />
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::EnumerableCoroutine" DisplayName="EnumerableCoroutine class" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::EnumerableCoroutine::IImpl" DisplayName="IImpl class" Doc="false">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::EnumerableCoroutine::IImpl::OnYield(&amp; const Value)" DisplayName="OnYield method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::EnumerableCoroutine::IImpl::OnJoin(Ptr&lt;IValueEnumerable&gt;)" DisplayName="OnJoin method" Doc="false" />
        </Symbol>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::EnumerableCoroutine::Creator" DisplayName="Creator typedecl" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::EnumerableCoroutine::YieldAndPause(* IImpl,&amp; const Value)" DisplayName="YieldAndPause method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::EnumerableCoroutine::JoinAndPause(* IImpl,Ptr&lt;IValueEnumerable&gt;)" DisplayName="JoinAndPause method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::EnumerableCoroutine::ReturnAndExit(* IImpl)" DisplayName="ReturnAndExit method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::EnumerableCoroutine::Create(&amp; const Creator)" DisplayName="Create method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>