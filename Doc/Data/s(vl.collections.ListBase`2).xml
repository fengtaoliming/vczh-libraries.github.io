<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.collections.ListBase`2">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Base type for a list container.&lt;/summary&gt;
  &lt;typeparam name="T"&gt;Type of elements.&lt;/typeparam&gt;
  &lt;typeparam name="K"&gt;Type of the key type of elements.&lt;/typeparam&gt;
&lt;/Document&gt;</Document>
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::collections::T" OverloadKey="::vl::collections::ListBase`2::T" />
        <TypeParameterDecl Access="Public" Name="K" Tags="x86, Windows" NameKey="::vl::collections::K" OverloadKey="::vl::collections::ListBase`2::K" />
      </TypeParameters>
      <Specialization />
      <Element>
        <ClassDecl Access="Public" Name="ListBase" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase" OverloadKey="::vl::collections::ListBase`2" ClassType="Class">
          <Children>
            <VarDecl Access="Protected" Name="capacity" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::capacity" OverloadKey="::vl::collections::ListBase`2::capacity" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Protected" Name="lessMemoryMode" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::lessMemoryMode" OverloadKey="::vl::collections::ListBase`2::lessMemoryMode" Static="False">
              <Type>
                <RefTypeDecl Name="bool" />
              </Type>
            </VarDecl>
            <FuncDecl Access="Protected" Name="CalculateCapacity" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::CalculateCapacity" OverloadKey="::vl::collections::ListBase`2::CalculateCapacity(vint)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="expected" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::CalculateCapacity::expected" OverloadKey="::vl::collections::ListBase`2::CalculateCapacity(vint)::expected" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Protected" Name="MakeRoom" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::MakeRoom" OverloadKey="::vl::collections::ListBase`2::MakeRoom(vint,vint,&amp; bool)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::MakeRoom::index" OverloadKey="::vl::collections::ListBase`2::MakeRoom(vint,vint,&amp; bool)::index" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="_count" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::MakeRoom::_count" OverloadKey="::vl::collections::ListBase`2::MakeRoom(vint,vint,&amp; bool)::_count" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="uninitialized" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::MakeRoom::uninitialized" OverloadKey="::vl::collections::ListBase`2::MakeRoom(vint,vint,&amp; bool)::uninitialized" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <RefTypeDecl Name="bool" />
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Protected" Name="ReleaseUnnecessaryBuffer" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::ReleaseUnnecessaryBuffer" OverloadKey="::vl::collections::ListBase`2::ReleaseUnnecessaryBuffer(vint)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="previousCount" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::ReleaseUnnecessaryBuffer::previousCount" OverloadKey="::vl::collections::ListBase`2::ReleaseUnnecessaryBuffer(vint)::previousCount" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="ListBase" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::ListBase" OverloadKey="::vl::collections::ListBase`2::ListBase()" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="~ListBase" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::~ListBase" OverloadKey="::vl::collections::ListBase`2::~ListBase()" Virtual="Normal" Function="Destructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="SetLessMemoryMode" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::SetLessMemoryMode" OverloadKey="::vl::collections::ListBase`2::SetLessMemoryMode(bool)" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Set a preference of using memory.&lt;/summary&gt;
  &lt;param name="mode"&gt;Set to true (by default) to let the container efficiently reduce memory usage when necessary.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="mode" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::SetLessMemoryMode::mode" OverloadKey="::vl::collections::ListBase`2::SetLessMemoryMode(bool)::mode" Static="False">
                      <Type>
                        <RefTypeDecl Name="bool" />
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="RemoveAt" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::RemoveAt" OverloadKey="::vl::collections::ListBase`2::RemoveAt(vint)" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Remove an element.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the element is removed.&lt;/returns&gt;
  &lt;param name="index"&gt;The index of the element to remove.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::RemoveAt::index" OverloadKey="::vl::collections::ListBase`2::RemoveAt(vint)::index" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="RemoveRange" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::RemoveRange" OverloadKey="::vl::collections::ListBase`2::RemoveRange(vint,vint)" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Remove elements.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the element is removed.&lt;/returns&gt;
  &lt;param name="index"&gt;The index of the first element to remove.&lt;/param&gt;
  &lt;param name="_count"&gt;The number of elements to remove.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::RemoveRange::index" OverloadKey="::vl::collections::ListBase`2::RemoveRange(vint,vint)::index" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="_count" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::RemoveRange::_count" OverloadKey="::vl::collections::ListBase`2::RemoveRange(vint,vint)::_count" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Clear" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ListBase::Clear" OverloadKey="::vl::collections::ListBase`2::Clear()" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Remove all elements.&lt;/summary&gt;
  &lt;returns&gt;Returns true if all elements are removed.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::collections::ArrayBase" Name="ArrayBase">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections::ArrayBase`1@s:vl.collections.ArrayBase`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::collections::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections::ListBase`2::T@s:vl.collections.ListBase`2" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>