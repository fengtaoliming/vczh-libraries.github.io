<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.GetLazyList`2(Ptr{IValueReadonlyDictionary})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="K" Tags="x86, Windows" NameKey="::vl::reflection::description::K" OverloadKey="::vl::reflection::description::GetLazyList`2(Ptr&lt;IValueReadonlyDictionary&gt;)::K" />
        <TypeParameterDecl Access="Public" Name="V" Tags="x86, Windows" NameKey="::vl::reflection::description::V" OverloadKey="::vl::reflection::description::GetLazyList`2(Ptr&lt;IValueReadonlyDictionary&gt;)::V" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="GetLazyList" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::GetLazyList" OverloadKey="::vl::reflection::description::GetLazyList`2(Ptr&lt;IValueReadonlyDictionary&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::collections::LazyList" Name="LazyList">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections::LazyList`1@s:vl.collections.LazyList`1" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections@ns:vl.collections" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                  <TypeArguments>
                    <GenericTypeDecl>
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::collections::Pair" Name="Pair">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections::Pair`2@s:vl.collections.Pair`2" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections@ns:vl.collections" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::K" Name="K">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::GetLazyList`2(Ptr&lt;IValueReadonlyDictionary&gt;)::K@s:vl.reflection.description.GetLazyList`2(Ptr{IValueReadonlyDictionary})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::V" Name="V">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::GetLazyList`2(Ptr&lt;IValueReadonlyDictionary&gt;)::V@s:vl.reflection.description.GetLazyList`2(Ptr{IValueReadonlyDictionary})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::GetLazyList::value" OverloadKey="::vl::reflection::description::GetLazyList`2(Ptr&lt;IValueReadonlyDictionary&gt;)::value" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IValueReadonlyDictionary" Name="IValueReadonlyDictionary">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::IValueReadonlyDictionary@s:vl.reflection.description.IValueReadonlyDictionary" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.GetLazyList`2(Ptr{IValueDictionary})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="K" Tags="x86, Windows" NameKey="::vl::reflection::description::K" OverloadKey="::vl::reflection::description::GetLazyList`2(Ptr&lt;IValueDictionary&gt;)::K" />
        <TypeParameterDecl Access="Public" Name="V" Tags="x86, Windows" NameKey="::vl::reflection::description::V" OverloadKey="::vl::reflection::description::GetLazyList`2(Ptr&lt;IValueDictionary&gt;)::V" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="GetLazyList" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::GetLazyList" OverloadKey="::vl::reflection::description::GetLazyList`2(Ptr&lt;IValueDictionary&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::collections::LazyList" Name="LazyList">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections::LazyList`1@s:vl.collections.LazyList`1" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections@ns:vl.collections" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                  <TypeArguments>
                    <GenericTypeDecl>
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::collections::Pair" Name="Pair">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections::Pair`2@s:vl.collections.Pair`2" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections@ns:vl.collections" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::K" Name="K">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::GetLazyList`2(Ptr&lt;IValueDictionary&gt;)::K@s:vl.reflection.description.GetLazyList`2(Ptr{IValueDictionary})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::V" Name="V">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::GetLazyList`2(Ptr&lt;IValueDictionary&gt;)::V@s:vl.reflection.description.GetLazyList`2(Ptr{IValueDictionary})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::GetLazyList::value" OverloadKey="::vl::reflection::description::GetLazyList`2(Ptr&lt;IValueDictionary&gt;)::value" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IValueDictionary" Name="IValueDictionary">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::IValueDictionary@s:vl.reflection.description.IValueDictionary" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>