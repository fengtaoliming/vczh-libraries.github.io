<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.__vwsn.InSet`1(&amp; const T,&amp; const collections.LazyList{T})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::__vwsn::T" OverloadKey="::vl::__vwsn::InSet`1(&amp; const T,&amp; const collections::LazyList&lt;T&gt;)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="InSet" Tags="x64, Windows;x86, Windows" NameKey="::vl::__vwsn::InSet" OverloadKey="::vl::__vwsn::InSet`1(&amp; const T,&amp; const collections::LazyList&lt;T&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::__vwsn::InSet::value" OverloadKey="::vl::__vwsn::InSet`1(&amp; const T,&amp; const collections::LazyList&lt;T&gt;)::value" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::__vwsn::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::__vwsn::InSet`1(&amp; const T,&amp; const collections::LazyList&lt;T&gt;)::T@s:vl.__vwsn.InSet`1(&amp; const T,&amp; const collections.LazyList{T})" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="collection" Tags="x64, Windows;x86, Windows" NameKey="::vl::__vwsn::InSet::collection" OverloadKey="::vl::__vwsn::InSet`1(&amp; const T,&amp; const collections::LazyList&lt;T&gt;)::collection" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <SubTypeDecl ReferencingNameKey="::vl::collections::LazyList" Name="LazyList">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections::LazyList`1@s:vl.collections.LazyList`1" />
                                  </ReferencingOverloadKeys>
                                  <Parent>
                                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::collections@ns:vl.collections" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Parent>
                                </SubTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::__vwsn::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::__vwsn::InSet`1(&amp; const T,&amp; const collections::LazyList&lt;T&gt;)::T@s:vl.__vwsn.InSet`1(&amp; const T,&amp; const collections.LazyList{T})" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.__vwsn.InSet`1(&amp; const T,Ptr{reflection.description.IValueReadonlyList})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::__vwsn::T" OverloadKey="::vl::__vwsn::InSet`1(&amp; const T,Ptr&lt;reflection::description::IValueReadonlyList&gt;)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="InSet" Tags="x64, Windows;x86, Windows" NameKey="::vl::__vwsn::InSet" OverloadKey="::vl::__vwsn::InSet`1(&amp; const T,Ptr&lt;reflection::description::IValueReadonlyList&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::__vwsn::InSet::value" OverloadKey="::vl::__vwsn::InSet`1(&amp; const T,Ptr&lt;reflection::description::IValueReadonlyList&gt;)::value" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::__vwsn::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::__vwsn::InSet`1(&amp; const T,Ptr&lt;reflection::description::IValueReadonlyList&gt;)::T@s:vl.__vwsn.InSet`1(&amp; const T,Ptr{reflection.description.IValueReadonlyList})" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="collection" Tags="x64, Windows;x86, Windows" NameKey="::vl::__vwsn::InSet::collection" OverloadKey="::vl::__vwsn::InSet`1(&amp; const T,Ptr&lt;reflection::description::IValueReadonlyList&gt;)::collection" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::IValueReadonlyList" Name="IValueReadonlyList">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::IValueReadonlyList@s:vl.reflection.description.IValueReadonlyList" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <SubTypeDecl ReferencingNameKey="::vl::reflection::description" Name="description">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description@ns:vl.reflection.description" />
                              </ReferencingOverloadKeys>
                              <Parent>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection" Name="reflection">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection@ns:vl.reflection" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Parent>
                            </SubTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>