<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.workflow.WfPrint(Ptr{WfAttribute},&amp; const WString,&amp; parsing.ParsingWriter)">
    <FuncDecl Access="Public" Name="WfPrint" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfAttribute&gt;,&amp; const WString,&amp; parsing::ParsingWriter)" Virtual="Normal" Function="Function">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Print a Workflow attribute.&lt;/summary&gt;
  &lt;param name="node"&gt;The Workflow attribute.&lt;/param&gt;
  &lt;param name="indent"&gt;The indentation.&lt;/param&gt;
  &lt;param name="writer"&gt;The target writer.&lt;/param&gt;
&lt;/Document&gt;</Document>
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="void" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::node" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfAttribute&gt;,&amp; const WString,&amp; parsing::ParsingWriter)::node" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::workflow::WfAttribute" Name="WfAttribute">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::workflow::WfAttribute@s:vl.workflow.WfAttribute" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="indent" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::indent" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfAttribute&gt;,&amp; const WString,&amp; parsing::ParsingWriter)::indent" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::WString@s:vl.WString" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="writer" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::writer" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfAttribute&gt;,&amp; const WString,&amp; parsing::ParsingWriter)::writer" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::parsing::ParsingWriter" Name="ParsingWriter">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::ParsingWriter@s:vl.parsing.ParsingWriter" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing" Name="parsing">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing@ns:vl.parsing" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.workflow.WfPrint(Ptr{WfType},&amp; const WString,&amp; parsing.ParsingWriter)">
    <FuncDecl Access="Public" Name="WfPrint" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfType&gt;,&amp; const WString,&amp; parsing::ParsingWriter)" Virtual="Normal" Function="Function">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Print a Workflow type.&lt;/summary&gt;
  &lt;param name="node"&gt;The Workflow type.&lt;/param&gt;
  &lt;param name="indent"&gt;The indentation.&lt;/param&gt;
  &lt;param name="writer"&gt;The target writer.&lt;/param&gt;
&lt;/Document&gt;</Document>
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="void" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::node" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfType&gt;,&amp; const WString,&amp; parsing::ParsingWriter)::node" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::workflow::WfType" Name="WfType">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::workflow::WfType@s:vl.workflow.WfType" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="indent" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::indent" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfType&gt;,&amp; const WString,&amp; parsing::ParsingWriter)::indent" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::WString@s:vl.WString" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="writer" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::writer" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfType&gt;,&amp; const WString,&amp; parsing::ParsingWriter)::writer" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::parsing::ParsingWriter" Name="ParsingWriter">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::ParsingWriter@s:vl.parsing.ParsingWriter" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing" Name="parsing">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing@ns:vl.parsing" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.workflow.WfPrint(Ptr{WfExpression},&amp; const WString,&amp; parsing.ParsingWriter)">
    <FuncDecl Access="Public" Name="WfPrint" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfExpression&gt;,&amp; const WString,&amp; parsing::ParsingWriter)" Virtual="Normal" Function="Function">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Print a Workflow expression.&lt;/summary&gt;
  &lt;param name="node"&gt;The Workflow expression.&lt;/param&gt;
  &lt;param name="indent"&gt;The indentation.&lt;/param&gt;
  &lt;param name="writer"&gt;The target writer.&lt;/param&gt;
&lt;/Document&gt;</Document>
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="void" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::node" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfExpression&gt;,&amp; const WString,&amp; parsing::ParsingWriter)::node" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::workflow::WfExpression" Name="WfExpression">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::workflow::WfExpression@s:vl.workflow.WfExpression" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="indent" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::indent" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfExpression&gt;,&amp; const WString,&amp; parsing::ParsingWriter)::indent" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::WString@s:vl.WString" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="writer" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::writer" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfExpression&gt;,&amp; const WString,&amp; parsing::ParsingWriter)::writer" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::parsing::ParsingWriter" Name="ParsingWriter">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::ParsingWriter@s:vl.parsing.ParsingWriter" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing" Name="parsing">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing@ns:vl.parsing" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.workflow.WfPrint(Ptr{WfStatement},&amp; const WString,&amp; parsing.ParsingWriter)">
    <FuncDecl Access="Public" Name="WfPrint" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfStatement&gt;,&amp; const WString,&amp; parsing::ParsingWriter)" Virtual="Normal" Function="Function">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Print a Workflow statement.&lt;/summary&gt;
  &lt;param name="node"&gt;The Workflow statement.&lt;/param&gt;
  &lt;param name="indent"&gt;The indentation.&lt;/param&gt;
  &lt;param name="writer"&gt;The target writer.&lt;/param&gt;
&lt;/Document&gt;</Document>
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="void" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::node" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfStatement&gt;,&amp; const WString,&amp; parsing::ParsingWriter)::node" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::workflow::WfStatement" Name="WfStatement">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::workflow::WfStatement@s:vl.workflow.WfStatement" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="indent" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::indent" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfStatement&gt;,&amp; const WString,&amp; parsing::ParsingWriter)::indent" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::WString@s:vl.WString" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="writer" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::writer" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfStatement&gt;,&amp; const WString,&amp; parsing::ParsingWriter)::writer" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::parsing::ParsingWriter" Name="ParsingWriter">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::ParsingWriter@s:vl.parsing.ParsingWriter" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing" Name="parsing">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing@ns:vl.parsing" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.workflow.WfPrint(Ptr{WfDeclaration},&amp; const WString,&amp; parsing.ParsingWriter)">
    <FuncDecl Access="Public" Name="WfPrint" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfDeclaration&gt;,&amp; const WString,&amp; parsing::ParsingWriter)" Virtual="Normal" Function="Function">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Print a Workflow declaration.&lt;/summary&gt;
  &lt;param name="node"&gt;The Workflow declaration.&lt;/param&gt;
  &lt;param name="indent"&gt;The indentation.&lt;/param&gt;
  &lt;param name="writer"&gt;The target writer.&lt;/param&gt;
&lt;/Document&gt;</Document>
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="void" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::node" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfDeclaration&gt;,&amp; const WString,&amp; parsing::ParsingWriter)::node" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::workflow::WfDeclaration" Name="WfDeclaration">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::workflow::WfDeclaration@s:vl.workflow.WfDeclaration" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="indent" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::indent" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfDeclaration&gt;,&amp; const WString,&amp; parsing::ParsingWriter)::indent" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::WString@s:vl.WString" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="writer" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::writer" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfDeclaration&gt;,&amp; const WString,&amp; parsing::ParsingWriter)::writer" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::parsing::ParsingWriter" Name="ParsingWriter">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::ParsingWriter@s:vl.parsing.ParsingWriter" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing" Name="parsing">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing@ns:vl.parsing" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.workflow.WfPrint(Ptr{WfModule},&amp; const WString,&amp; parsing.ParsingWriter)">
    <FuncDecl Access="Public" Name="WfPrint" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfModule&gt;,&amp; const WString,&amp; parsing::ParsingWriter)" Virtual="Normal" Function="Function">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Print a Workflow module.&lt;/summary&gt;
  &lt;param name="node"&gt;The Workflow module.&lt;/param&gt;
  &lt;param name="indent"&gt;The indentation.&lt;/param&gt;
  &lt;param name="writer"&gt;The target writer.&lt;/param&gt;
&lt;/Document&gt;</Document>
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="void" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::node" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfModule&gt;,&amp; const WString,&amp; parsing::ParsingWriter)::node" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::workflow::WfModule" Name="WfModule">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::workflow::WfModule@s:vl.workflow.WfModule" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="indent" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::indent" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfModule&gt;,&amp; const WString,&amp; parsing::ParsingWriter)::indent" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::WString@s:vl.WString" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="writer" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::writer" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfModule&gt;,&amp; const WString,&amp; parsing::ParsingWriter)::writer" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::parsing::ParsingWriter" Name="ParsingWriter">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::ParsingWriter@s:vl.parsing.ParsingWriter" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing" Name="parsing">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing@ns:vl.parsing" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.workflow.WfPrint(Ptr{WfAttribute},&amp; const WString,&amp; stream.TextWriter)">
    <FuncDecl Access="Public" Name="WfPrint" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfAttribute&gt;,&amp; const WString,&amp; stream::TextWriter)" Virtual="Normal" Function="Function">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Print a Workflow attribute.&lt;/summary&gt;
  &lt;param name="node"&gt;The Workflow attribute.&lt;/param&gt;
  &lt;param name="indent"&gt;The indentation.&lt;/param&gt;
  &lt;param name="writer"&gt;The target writer.&lt;/param&gt;
&lt;/Document&gt;</Document>
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="void" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::node" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfAttribute&gt;,&amp; const WString,&amp; stream::TextWriter)::node" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::workflow::WfAttribute" Name="WfAttribute">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::workflow::WfAttribute@s:vl.workflow.WfAttribute" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="indent" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::indent" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfAttribute&gt;,&amp; const WString,&amp; stream::TextWriter)::indent" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::WString@s:vl.WString" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="writer" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::writer" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfAttribute&gt;,&amp; const WString,&amp; stream::TextWriter)::writer" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::stream::TextWriter" Name="TextWriter">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::stream::TextWriter@s:vl.stream.TextWriter" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::stream" Name="stream">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::stream@ns:vl.stream" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.workflow.WfPrint(Ptr{WfType},&amp; const WString,&amp; stream.TextWriter)">
    <FuncDecl Access="Public" Name="WfPrint" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfType&gt;,&amp; const WString,&amp; stream::TextWriter)" Virtual="Normal" Function="Function">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Print a Workflow type.&lt;/summary&gt;
  &lt;param name="node"&gt;The Workflow type.&lt;/param&gt;
  &lt;param name="indent"&gt;The indentation.&lt;/param&gt;
  &lt;param name="writer"&gt;The target writer.&lt;/param&gt;
&lt;/Document&gt;</Document>
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="void" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::node" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfType&gt;,&amp; const WString,&amp; stream::TextWriter)::node" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::workflow::WfType" Name="WfType">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::workflow::WfType@s:vl.workflow.WfType" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="indent" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::indent" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfType&gt;,&amp; const WString,&amp; stream::TextWriter)::indent" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::WString@s:vl.WString" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="writer" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::writer" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfType&gt;,&amp; const WString,&amp; stream::TextWriter)::writer" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::stream::TextWriter" Name="TextWriter">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::stream::TextWriter@s:vl.stream.TextWriter" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::stream" Name="stream">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::stream@ns:vl.stream" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.workflow.WfPrint(Ptr{WfExpression},&amp; const WString,&amp; stream.TextWriter)">
    <FuncDecl Access="Public" Name="WfPrint" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfExpression&gt;,&amp; const WString,&amp; stream::TextWriter)" Virtual="Normal" Function="Function">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Print a Workflow expression.&lt;/summary&gt;
  &lt;param name="node"&gt;The Workflow expression.&lt;/param&gt;
  &lt;param name="indent"&gt;The indentation.&lt;/param&gt;
  &lt;param name="writer"&gt;The target writer.&lt;/param&gt;
&lt;/Document&gt;</Document>
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="void" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::node" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfExpression&gt;,&amp; const WString,&amp; stream::TextWriter)::node" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::workflow::WfExpression" Name="WfExpression">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::workflow::WfExpression@s:vl.workflow.WfExpression" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="indent" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::indent" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfExpression&gt;,&amp; const WString,&amp; stream::TextWriter)::indent" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::WString@s:vl.WString" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="writer" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::writer" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfExpression&gt;,&amp; const WString,&amp; stream::TextWriter)::writer" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::stream::TextWriter" Name="TextWriter">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::stream::TextWriter@s:vl.stream.TextWriter" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::stream" Name="stream">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::stream@ns:vl.stream" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.workflow.WfPrint(Ptr{WfStatement},&amp; const WString,&amp; stream.TextWriter)">
    <FuncDecl Access="Public" Name="WfPrint" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfStatement&gt;,&amp; const WString,&amp; stream::TextWriter)" Virtual="Normal" Function="Function">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Print a Workflow statement.&lt;/summary&gt;
  &lt;param name="node"&gt;The Workflow statement.&lt;/param&gt;
  &lt;param name="indent"&gt;The indentation.&lt;/param&gt;
  &lt;param name="writer"&gt;The target writer.&lt;/param&gt;
&lt;/Document&gt;</Document>
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="void" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::node" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfStatement&gt;,&amp; const WString,&amp; stream::TextWriter)::node" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::workflow::WfStatement" Name="WfStatement">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::workflow::WfStatement@s:vl.workflow.WfStatement" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="indent" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::indent" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfStatement&gt;,&amp; const WString,&amp; stream::TextWriter)::indent" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::WString@s:vl.WString" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="writer" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::writer" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfStatement&gt;,&amp; const WString,&amp; stream::TextWriter)::writer" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::stream::TextWriter" Name="TextWriter">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::stream::TextWriter@s:vl.stream.TextWriter" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::stream" Name="stream">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::stream@ns:vl.stream" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.workflow.WfPrint(Ptr{WfDeclaration},&amp; const WString,&amp; stream.TextWriter)">
    <FuncDecl Access="Public" Name="WfPrint" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfDeclaration&gt;,&amp; const WString,&amp; stream::TextWriter)" Virtual="Normal" Function="Function">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Print a Workflow declaration.&lt;/summary&gt;
  &lt;param name="node"&gt;The Workflow declaration.&lt;/param&gt;
  &lt;param name="indent"&gt;The indentation.&lt;/param&gt;
  &lt;param name="writer"&gt;The target writer.&lt;/param&gt;
&lt;/Document&gt;</Document>
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="void" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::node" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfDeclaration&gt;,&amp; const WString,&amp; stream::TextWriter)::node" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::workflow::WfDeclaration" Name="WfDeclaration">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::workflow::WfDeclaration@s:vl.workflow.WfDeclaration" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="indent" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::indent" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfDeclaration&gt;,&amp; const WString,&amp; stream::TextWriter)::indent" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::WString@s:vl.WString" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="writer" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::writer" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfDeclaration&gt;,&amp; const WString,&amp; stream::TextWriter)::writer" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::stream::TextWriter" Name="TextWriter">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::stream::TextWriter@s:vl.stream.TextWriter" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::stream" Name="stream">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::stream@ns:vl.stream" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.workflow.WfPrint(Ptr{WfModule},&amp; const WString,&amp; stream.TextWriter)">
    <FuncDecl Access="Public" Name="WfPrint" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfModule&gt;,&amp; const WString,&amp; stream::TextWriter)" Virtual="Normal" Function="Function">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Print a Workflow module.&lt;/summary&gt;
  &lt;param name="node"&gt;The Workflow module.&lt;/param&gt;
  &lt;param name="indent"&gt;The indentation.&lt;/param&gt;
  &lt;param name="writer"&gt;The target writer.&lt;/param&gt;
&lt;/Document&gt;</Document>
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="void" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::node" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfModule&gt;,&amp; const WString,&amp; stream::TextWriter)::node" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::workflow::WfModule" Name="WfModule">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::workflow::WfModule@s:vl.workflow.WfModule" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="indent" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::indent" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfModule&gt;,&amp; const WString,&amp; stream::TextWriter)::indent" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::WString@s:vl.WString" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="writer" Tags="x64, Windows;x86, Windows" NameKey="::vl::workflow::WfPrint::writer" OverloadKey="::vl::workflow::WfPrint(Ptr&lt;WfModule&gt;,&amp; const WString,&amp; stream::TextWriter)::writer" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::stream::TextWriter" Name="TextWriter">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::stream::TextWriter@s:vl.stream.TextWriter" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::stream" Name="stream">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::stream@ns:vl.stream" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
</OverloadingSymbols>