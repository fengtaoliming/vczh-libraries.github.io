<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.TypeHintTesterForReference`0{TypeFlags.NonGenericType}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters />
      <Specialization>
        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags::NonGenericType" Name="NonGenericType">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlags::NonGenericType@s:vl.reflection.description.TypeFlags" />
          </ReferencingOverloadKeys>
          <Parent>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Parent>
        </SubTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeHintTesterForReference" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTesterForReference" OverloadKey="::vl::reflection::description::TypeHintTesterForReference`0&lt;TypeFlags::NonGenericType&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTesterForReference::Result" OverloadKey="::vl::reflection::description::TypeHintTesterForReference`0&lt;TypeFlags::NonGenericType&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeInfoHint" Name="TypeInfoHint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeInfoHint@s:vl.reflection.description.TypeInfoHint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeHintTesterForReference`0{TypeFlags.FunctionType}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters />
      <Specialization>
        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags::FunctionType" Name="FunctionType">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlags::FunctionType@s:vl.reflection.description.TypeFlags" />
          </ReferencingOverloadKeys>
          <Parent>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Parent>
        </SubTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeHintTesterForReference" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTesterForReference" OverloadKey="::vl::reflection::description::TypeHintTesterForReference`0&lt;TypeFlags::FunctionType&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTesterForReference::Result" OverloadKey="::vl::reflection::description::TypeHintTesterForReference`0&lt;TypeFlags::FunctionType&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeInfoHint" Name="TypeInfoHint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeInfoHint@s:vl.reflection.description.TypeInfoHint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>