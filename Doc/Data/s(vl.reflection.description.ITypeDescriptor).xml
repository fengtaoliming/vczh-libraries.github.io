<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.ITypeDescriptor">
    <ClassDecl Access="Public" Name="ITypeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor" OverloadKey="::vl::reflection::description::ITypeDescriptor" ClassType="Class">
      <Children>
        <ClassDecl Access="Public" Name="ICpp" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::ICpp" OverloadKey="::vl::reflection::description::ITypeDescriptor::ICpp" ClassType="Class">
          <Children>
            <FuncDecl Access="Public" Name="GetFullName" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::ICpp::GetFullName" OverloadKey="::vl::reflection::description::ITypeDescriptor::ICpp::GetFullName()" Virtual="Abstract" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::IDescriptable" Name="IDescriptable">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::IDescriptable@s:vl.reflection.IDescriptable" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::Description" Name="Description">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::Description`1@s:vl.reflection.Description`1" />
                        <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfClassInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfClassInstance}" />
                        <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfInterfaceInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfInterfaceInstance}" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor::ICpp" Name="ICpp">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ITypeDescriptor::ICpp@s:vl.reflection.description.ITypeDescriptor" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
        <FuncDecl Access="Public" Name="GetCpp" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetCpp" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetCpp()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor::ICpp" Name="ICpp">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ITypeDescriptor::ICpp@s:vl.reflection.description.ITypeDescriptor" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetTypeDescriptorFlags" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetTypeDescriptorFlags" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetTypeDescriptorFlags()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeDescriptorFlags" Name="TypeDescriptorFlags">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::TypeDescriptorFlags@s:vl.reflection.description.TypeDescriptorFlags" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsAggregatable" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::IsAggregatable" OverloadKey="::vl::reflection::description::ITypeDescriptor::IsAggregatable()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetTypeName" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetTypeName" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetTypeName()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::WString@s:vl.WString" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetValueType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetValueType" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetValueType()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IValueType" Name="IValueType">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IValueType@s:vl.reflection.description.IValueType" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetEnumType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetEnumType" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetEnumType()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IEnumType" Name="IEnumType">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IEnumType@s:vl.reflection.description.IEnumType" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetSerializableType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetSerializableType" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetSerializableType()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ISerializableType" Name="ISerializableType">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ISerializableType@s:vl.reflection.description.ISerializableType" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetBaseTypeDescriptorCount" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetBaseTypeDescriptorCount" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetBaseTypeDescriptorCount()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetBaseTypeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetBaseTypeDescriptor" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetBaseTypeDescriptor(vint)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetBaseTypeDescriptor::index" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetBaseTypeDescriptor(vint)::index" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="CanConvertTo" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::CanConvertTo" OverloadKey="::vl::reflection::description::ITypeDescriptor::CanConvertTo(* ITypeDescriptor)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="targetType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::CanConvertTo::targetType" OverloadKey="::vl::reflection::description::ITypeDescriptor::CanConvertTo(* ITypeDescriptor)::targetType" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetPropertyCount" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetPropertyCount" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetPropertyCount()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetProperty" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetProperty" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetProperty(vint)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IPropertyInfo" Name="IPropertyInfo">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IPropertyInfo@s:vl.reflection.description.IPropertyInfo" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetProperty::index" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetProperty(vint)::index" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsPropertyExists" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::IsPropertyExists" OverloadKey="::vl::reflection::description::ITypeDescriptor::IsPropertyExists(&amp; const WString,bool)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::IsPropertyExists::name" OverloadKey="::vl::reflection::description::ITypeDescriptor::IsPropertyExists(&amp; const WString,bool)::name" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="inheritable" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::IsPropertyExists::inheritable" OverloadKey="::vl::reflection::description::ITypeDescriptor::IsPropertyExists(&amp; const WString,bool)::inheritable" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetPropertyByName" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetPropertyByName" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetPropertyByName(&amp; const WString,bool)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IPropertyInfo" Name="IPropertyInfo">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IPropertyInfo@s:vl.reflection.description.IPropertyInfo" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetPropertyByName::name" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetPropertyByName(&amp; const WString,bool)::name" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="inheritable" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetPropertyByName::inheritable" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetPropertyByName(&amp; const WString,bool)::inheritable" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetEventCount" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetEventCount" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetEventCount()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetEvent" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetEvent" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetEvent(vint)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IEventInfo" Name="IEventInfo">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IEventInfo@s:vl.reflection.description.IEventInfo" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetEvent::index" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetEvent(vint)::index" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsEventExists" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::IsEventExists" OverloadKey="::vl::reflection::description::ITypeDescriptor::IsEventExists(&amp; const WString,bool)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::IsEventExists::name" OverloadKey="::vl::reflection::description::ITypeDescriptor::IsEventExists(&amp; const WString,bool)::name" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="inheritable" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::IsEventExists::inheritable" OverloadKey="::vl::reflection::description::ITypeDescriptor::IsEventExists(&amp; const WString,bool)::inheritable" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetEventByName" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetEventByName" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetEventByName(&amp; const WString,bool)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IEventInfo" Name="IEventInfo">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IEventInfo@s:vl.reflection.description.IEventInfo" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetEventByName::name" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetEventByName(&amp; const WString,bool)::name" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="inheritable" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetEventByName::inheritable" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetEventByName(&amp; const WString,bool)::inheritable" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetMethodGroupCount" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetMethodGroupCount" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetMethodGroupCount()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetMethodGroup" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetMethodGroup" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetMethodGroup(vint)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IMethodGroupInfo" Name="IMethodGroupInfo">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IMethodGroupInfo@s:vl.reflection.description.IMethodGroupInfo" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetMethodGroup::index" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetMethodGroup(vint)::index" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsMethodGroupExists" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::IsMethodGroupExists" OverloadKey="::vl::reflection::description::ITypeDescriptor::IsMethodGroupExists(&amp; const WString,bool)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::IsMethodGroupExists::name" OverloadKey="::vl::reflection::description::ITypeDescriptor::IsMethodGroupExists(&amp; const WString,bool)::name" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="inheritable" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::IsMethodGroupExists::inheritable" OverloadKey="::vl::reflection::description::ITypeDescriptor::IsMethodGroupExists(&amp; const WString,bool)::inheritable" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetMethodGroupByName" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetMethodGroupByName" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetMethodGroupByName(&amp; const WString,bool)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IMethodGroupInfo" Name="IMethodGroupInfo">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IMethodGroupInfo@s:vl.reflection.description.IMethodGroupInfo" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetMethodGroupByName::name" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetMethodGroupByName(&amp; const WString,bool)::name" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="inheritable" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetMethodGroupByName::inheritable" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetMethodGroupByName(&amp; const WString,bool)::inheritable" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetConstructorGroup" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ITypeDescriptor::GetConstructorGroup" OverloadKey="::vl::reflection::description::ITypeDescriptor::GetConstructorGroup()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IMethodGroupInfo" Name="IMethodGroupInfo">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IMethodGroupInfo@s:vl.reflection.description.IMethodGroupInfo" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::IDescriptable" Name="IDescriptable">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::IDescriptable@s:vl.reflection.IDescriptable" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::Description" Name="Description">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::Description`1@s:vl.reflection.Description`1" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfClassInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfClassInstance}" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfInterfaceInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfInterfaceInstance}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>